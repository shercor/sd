syntax = "proto3";
package t2;
option go_package =  "./;t2";

message Solicitud {
    string IP = 1;   // IP de jugador  
    string PORT = 2;  // puerto jugador
}
  
message RespuestaSolicitud { // se usa varias veces por su campo ID
    int32 ID = 1; // ID
}

message Message {
    string body = 1;
}

message Jugada {
    int32 ID = 1;
    string numero = 2;
}

message ResultadoJugada {
    bool vivo = 1;
    bool NEXTETAPA = 2;
    bool WAIT = 3; // flag esperar a otros jugadores
}

message InfoJugada{
    int32 ID = 1;
	string etapa = 2;
	string jugada = 3;
	string ronda = 4; // RONDA SOLO SE MANDA EN ETAPA 1 o de lo contrario mandar siempre con valor 0 
}

// Interface exported by the server (Lider)
service LiderService {
    // Simple rpc
    rpc Unirse(Solicitud) returns (RespuestaSolicitud) {} // unirse al juego
    rpc SayHello(Message) returns (Message) {} // para debug
    
    // etapas
    rpc ProcesarJugada(Jugada) returns (Message) {} // procesar jugada en Lider de etapa 1
    rpc ProcesarJugadaDos(Jugada) returns (Message) {} // procesar jugada en Lider de etapa 2
    rpc ProcesarJugadaTres(Jugada) returns (Message) {} // procesar jugada en Lider de etapa 3

    rpc GetResultadosRonda(RespuestaSolicitud) returns (ResultadoJugada) {} // obtener resultado de ronda (etapa 1)

    rpc NotificarEstado(RespuestaSolicitud) returns (Message) {} // notificar estado (OK, MUERTO)

    rpc EmpezarEtapa(Message) returns (Message) {} // para que esperen los jugadores a que empiece la suguiente etapa

    rpc ConsultarMontoAcumulado(Message) returns (Message) {} // jugador -> lider
}

// Interface exported by the server (Pozo)
service PozoService {
    rpc ConsultarMontoAcumulado(Message) returns (Message) {} // lider -> pozo
}

// Interface exported by the server (NameNode)
service NameNodeService {
    rpc RegistrarJugada(InfoJugada) returns (Message) {}
    rpc ConsultarJugada(RespuestaSolicitud) returns (Message) {}
}

// Interface exported by the server (DataNode)
service DataNodeService {
    rpc RegistrarJugada(InfoJugada) returns (Message) {}
    rpc ConsultarJugada(RespuestaSolicitud) returns (Message) {}
}

